-- ==============================================
-- SCRIPT COMPLETO BASE DE DATOS HELP DESK
-- ==============================================

-------------------------------------------------
-- 1. DEPARTAMENTOS
-------------------------------------------------
CREATE TABLE DEPARTAMENTO (
    id_departamento NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(100) NOT NULL,
    descripcion     VARCHAR2(255)
);

-------------------------------------------------
-- 2. EMPLEADOS
-------------------------------------------------
CREATE TABLE EMPLEADO (
    id_empleado     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_departamento NUMBER NOT NULL,
    nombre          VARCHAR2(100) NOT NULL,
    apellido        VARCHAR2(100) NOT NULL,
    correo          VARCHAR2(150) UNIQUE NOT NULL,
    telefono        VARCHAR2(20),
    rol             VARCHAR2(50) CHECK (rol IN ('USUARIO','AGENTE','SUPERVISOR','ADMIN')),
    activo          CHAR(1) DEFAULT 'S' CHECK (activo IN ('S','N')),
    CONSTRAINT fk_empleado_departamento FOREIGN KEY (id_departamento)
        REFERENCES DEPARTAMENTO (id_departamento)
);

-------------------------------------------------
-- 3. TICKETS
-------------------------------------------------
CREATE TABLE TICKET (
    id_ticket            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_empleado_solicita NUMBER NOT NULL,
    id_empleado_asignado NUMBER,
    titulo               VARCHAR2(200) NOT NULL,
    descripcion          CLOB NOT NULL,
    estado               VARCHAR2(50) DEFAULT 'ABIERTO'
                         CHECK (estado IN ('ABIERTO','EN_PROCESO','CERRADO','CANCELADO')),
    prioridad            VARCHAR2(20)
                         CHECK (prioridad IN ('ALTA','MEDIA','BAJA')),
    fecha_creacion       TIMESTAMP DEFAULT SYSTIMESTAMP,
    fecha_cierre         TIMESTAMP,
    CONSTRAINT fk_ticket_solicita FOREIGN KEY (id_empleado_solicita)
        REFERENCES EMPLEADO (id_empleado),
    CONSTRAINT fk_ticket_asignado FOREIGN KEY (id_empleado_asignado)
        REFERENCES EMPLEADO (id_empleado)
);

-------------------------------------------------
-- 4. REPUESTOS
-------------------------------------------------
CREATE TABLE REPUESTO (
    id_repuesto      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre           VARCHAR2(100) NOT NULL,
    descripcion      VARCHAR2(255),
    stock_disponible NUMBER DEFAULT 0 CHECK (stock_disponible >= 0),
    precio_unitario  NUMBER(10,2) CHECK (precio_unitario >= 0)
);

-------------------------------------------------
-- 5. TICKET_REPUESTO (N:N)
-------------------------------------------------
CREATE TABLE TICKET_REPUESTO (
    id_ticket   NUMBER NOT NULL,
    id_repuesto NUMBER NOT NULL,
    cantidad    NUMBER DEFAULT 1 CHECK (cantidad > 0),
    PRIMARY KEY (id_ticket, id_repuesto),
    CONSTRAINT fk_tr_ticket FOREIGN KEY (id_ticket)
        REFERENCES TICKET (id_ticket),
    CONSTRAINT fk_tr_repuesto FOREIGN KEY (id_repuesto)
        REFERENCES REPUESTO (id_repuesto)
);

-------------------------------------------------
-- 6. COTIZACION INTERNA
-------------------------------------------------
CREATE TABLE COTIZACION (
    id_cotizacion  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_ticket      NUMBER NOT NULL,
    descripcion    CLOB,
    monto_estimado NUMBER(12,2) CHECK (monto_estimado >= 0),
    fecha_generada TIMESTAMP DEFAULT SYSTIMESTAMP,
    estado         VARCHAR2(50) DEFAULT 'PENDIENTE'
                   CHECK (estado IN ('PENDIENTE','APROBADA','RECHAZADA')),
    CONSTRAINT fk_cotizacion_ticket FOREIGN KEY (id_ticket)
        REFERENCES TICKET (id_ticket)
);

-------------------------------------------------
-- 7. ENCUESTA DE SATISFACCION
-------------------------------------------------
CREATE TABLE ENCUESTA_SATISFACCION (
    id_encuesta    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_ticket      NUMBER NOT NULL,
    calificacion   NUMBER CHECK (calificacion BETWEEN 1 AND 5),
    comentario     VARCHAR2(500),
    fecha_respuesta TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT fk_encuesta_ticket FOREIGN KEY (id_ticket)
        REFERENCES TICKET (id_ticket)
);

-------------------------------------------------
-- 8. PROVEEDORES
-------------------------------------------------
CREATE TABLE PROVEEDOR (
    id_proveedor NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre       VARCHAR2(150) NOT NULL,
    contacto     VARCHAR2(100),
    telefono     VARCHAR2(20),
    correo       VARCHAR2(150),
    direccion    VARCHAR2(255)
);

-------------------------------------------------
-- 9. COTIZACION PROVEEDOR
-------------------------------------------------
CREATE TABLE COTIZACION_PROVEEDOR (
    id_cotizacion_prov NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_repuesto        NUMBER NOT NULL,
    id_proveedor       NUMBER NOT NULL,
    precio_unitario    NUMBER(10,2) CHECK (precio_unitario >= 0),
    fecha_cotizacion   TIMESTAMP DEFAULT SYSTIMESTAMP,
    estado             VARCHAR2(20) DEFAULT 'PENDIENTE'
                       CHECK (estado IN ('PENDIENTE','APROBADA','RECHAZADA')),
    CONSTRAINT fk_cp_repuesto FOREIGN KEY (id_repuesto)
        REFERENCES REPUESTO (id_repuesto),
    CONSTRAINT fk_cp_proveedor FOREIGN KEY (id_proveedor)
        REFERENCES PROVEEDOR (id_proveedor)
);

-------------------------------------------------
-- 10. ORDEN DE COMPRA
-------------------------------------------------
CREATE TABLE ORDEN_COMPRA (
    id_oc      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_proveedor NUMBER NOT NULL,
    fecha_oc   TIMESTAMP DEFAULT SYSTIMESTAMP,
    estado     VARCHAR2(20) DEFAULT 'PENDIENTE'
               CHECK (estado IN ('PENDIENTE','RECIBIDA','CANCELADA')),
    CONSTRAINT fk_oc_proveedor FOREIGN KEY (id_proveedor)
        REFERENCES PROVEEDOR (id_proveedor)
);

-------------------------------------------------
-- 11. DETALLE ORDEN DE COMPRA
-------------------------------------------------
CREATE TABLE DETALLE_OC (
    id_oc         NUMBER NOT NULL,
    id_repuesto   NUMBER NOT NULL,
    cantidad      NUMBER CHECK (cantidad > 0),
    precio_unitario NUMBER(10,2) CHECK (precio_unitario >= 0),
    PRIMARY KEY (id_oc, id_repuesto),
    CONSTRAINT fk_doc_oc FOREIGN KEY (id_oc)
        REFERENCES ORDEN_COMPRA (id_oc),
    CONSTRAINT fk_doc_repuesto FOREIGN KEY (id_repuesto)
        REFERENCES REPUESTO (id_repuesto)
);

-------------------------------------------------
-- 12. TABLA DE LOGIN
-------------------------------------------------
CREATE TABLE LOGIN (
    id_login     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_empleado  NUMBER NOT NULL UNIQUE,
    usuario      VARCHAR2(100) UNIQUE NOT NULL,
    contrasena   VARCHAR2(255) NOT NULL, -- Se recomienda almacenar hashed
    fecha_creacion TIMESTAMP DEFAULT SYSTIMESTAMP,
    ultimo_acceso TIMESTAMP,
    activo       CHAR(1) DEFAULT 'S' CHECK (activo IN ('S','N')),
    CONSTRAINT fk_login_empleado FOREIGN KEY (id_empleado)
        REFERENCES EMPLEADO (id_empleado)
);

-- ==============================================
-- INDICES ADICIONALES PARA RENDIMIENTO
-- ==============================================
CREATE INDEX idx_ticket_estado ON TICKET (estado);
CREATE INDEX idx_ticket_fecha  ON TICKET (fecha_creacion);
CREATE INDEX idx_empleado_rol  ON EMPLEADO (rol);
CREATE INDEX idx_repuesto_stock ON REPUESTO (stock_disponible);



