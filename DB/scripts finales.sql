-- =============================================================
-- 1) Limpieza (DROP si existen)
-- =============================================================
BEGIN EXECUTE IMMEDIATE 'DROP TABLE SOLICITUD_REPUESTOS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE NOTIFICACIONES'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE HISTORIAL_CASO'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE CASOS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE USUARIOS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE ENCUESTA_SATISFACCION'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE EMPLEADO'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE DEPARTAMENTOS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE PUESTOS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE TIPO_INCIDENCIAS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE INCIDENCIA'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE PRIORIDAD'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE ESTADO_CASO'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE REPUESTOS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE SOLICITUD_REPUESTOS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- =============================================================
-- 2) Creación de tablas base (igual a BD real)
-- =============================================================
CREATE TABLE PUESTOS (
    ID_PUESTO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOMBRE VARCHAR2(100 BYTE) NOT NULL,
    DESCRIPCION VARCHAR2(200 BYTE)
);

CREATE TABLE DEPARTAMENTOS (
    ID_DEPARTAMENTO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOMBRE VARCHAR2(100 BYTE) NOT NULL,
    DESCRIPCION VARCHAR2(255 BYTE)
);

CREATE TABLE EMPLEADO (
    ID_EMPLEADO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_DEPARTAMENTO NUMBER REFERENCES DEPARTAMENTOS(ID_DEPARTAMENTO),
    NOMBRE VARCHAR2(100 BYTE),
    APELLIDO VARCHAR2(100 BYTE),
    CORREO VARCHAR2(150 BYTE),
    TELEFONO VARCHAR2(20 BYTE),
    ROL VARCHAR2(50 BYTE),
    ACTIVO CHAR(1 BYTE),
    ID_PUESTO NUMBER REFERENCES PUESTOS(ID_PUESTO)
);

CREATE TABLE USUARIOS (
    ID_USUARIO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_EMPLEADO NUMBER REFERENCES EMPLEADO(ID_EMPLEADO),
    USERNAME VARCHAR2(100 BYTE) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(255 BYTE) NOT NULL,
    ACTIVO CHAR(1 BYTE),
    ULTIMO_LOGIN TIMESTAMP(6)
);

CREATE TABLE TIPO_INCIDENCIA (
    ID_TIPO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TIPO VARCHAR2(100 BYTE)
);

CREATE TABLE INCIDENCIAS (
    ID_INCIDENCIA NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOMBRE VARCHAR2(200 BYTE),
    ID_TIPO NUMBER REFERENCES TIPO_INCIDENCIAS(ID_TIPO)
);

CREATE TABLE PRIORIDAD (
    ID_PRIORIDAD NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOMBRE VARCHAR2(50 BYTE)
);

CREATE TABLE ESTADO_CASO (
    ID_ESTADO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOMBRE VARCHAR2(50 BYTE)
);

CREATE TABLE CASOS (
    ID_CASO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_EMPLEADO_SOLICITA NUMBER REFERENCES EMPLEADO(ID_EMPLEADO),
    ID_TIPO_INCIDENCIA NUMBER REFERENCES TIPO_INCIDENCIAS(ID_TIPO),
    ID_INCIDENCIA NUMBER REFERENCES INCIDENCIAS(ID_INCIDENCIA),
    TITULO VARCHAR2(200 BYTE),
    DESCRIPCION CLOB,
    ID_PRIORIDAD NUMBER REFERENCES PRIORIDAD(ID_PRIORIDAD),
    ID_ESTADO_ACTUAL NUMBER REFERENCES ESTADO_CASO(ID_ESTADO),
    ID_TECNICO NUMBER REFERENCES EMPLEADO(ID_EMPLEADO),
    FECHA_CREACION TIMESTAMP(6),
    FECHA_CIERRE TIMESTAMP(6),
    TIEMPO_RESOLUCION INTERVAL DAY(2) TO SECOND(6)
);

CREATE TABLE HISTORIAL_CASO (
    ID_HISTORIAL NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_CASO NUMBER REFERENCES CASOS(ID_CASO),
    FECHA DATE,
    COMENTARIO CLOB,
    ID_ESTADO NUMBER REFERENCES ESTADO_CASO(ID_ESTADO),
    ID_EMPLEADO NUMBER REFERENCES EMPLEADO(ID_EMPLEADO)
);

CREATE TABLE REPUESTOS (
    ID_REPUESTO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOMBRE VARCHAR2(100 BYTE),
    DESCRIPCION VARCHAR2(255 BYTE),
    STOCK NUMBER,
    PRECIO_UNITARIO NUMBER(10,2)
);

CREATE TABLE SOLICITUD_REPUESTOS (
    ID_CASO NUMBER REFERENCES CASOS(ID_CASO),
    ID_REPUESTO NUMBER REFERENCES REPUESTOS(ID_REPUESTO),
    CANTIDAD NUMBER
);

CREATE TABLE NOTIFICACIONES (
    ID_NOTIFICACION NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_CASO NUMBER REFERENCES CASOS(ID_CASO),
    ID_EMPLEADO NUMBER REFERENCES EMPLEADO(ID_EMPLEADO),
    MENSAJE VARCHAR2(255 BYTE),
    ESTADO VARCHAR2(50 BYTE)
);

CREATE TABLE ENCUESTA_SATISFACCION (
    ID_ENCUESTA NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_CASO NUMBER REFERENCES CASOS(ID_CASO),
    CALIFICACION NUMBER CHECK (CALIFICACION BETWEEN 1 AND 5),
    COMENTARIO VARCHAR2(500 BYTE),
    FECHA_RESPUESTA TIMESTAMP(6)
);

-- =============================================================
-- 3) Inserts iniciales
-- =============================================================
-- PUESTOS
INSERT INTO PUESTOS (NOMBRE, DESCRIPCION) VALUES ('Soporte Técnico','Equipo de soporte TI');
INSERT INTO PUESTOS (NOMBRE, DESCRIPCION) VALUES ('Administrador','Administración del sistema');

-- DEPARTAMENTOS
INSERT INTO DEPARTAMENTOS (NOMBRE, DESCRIPCION) VALUES ('TI','Departamento de Tecnología');
INSERT INTO DEPARTAMENTOS (NOMBRE, DESCRIPCION) VALUES ('RRHH','Recursos Humanos');

-- EMPLEADOS
INSERT INTO EMPLEADO (ID_DEPARTAMENTO, NOMBRE, APELLIDO, CORREO, TELEFONO, ROL, ACTIVO, ID_PUESTO)
VALUES (1,'Juan','Perez','juan@email.com','12345678','USUARIO','S',1);
INSERT INTO EMPLEADO (ID_DEPARTAMENTO, NOMBRE, APELLIDO, CORREO, TELEFONO, ROL, ACTIVO, ID_PUESTO)
VALUES (1,'Ana','Lopez','ana@email.com','87654321','USUARIO','S',1);

-- USUARIOS
INSERT INTO USUARIOS (ID_EMPLEADO, USERNAME, PASSWORD, ACTIVO)
VALUES (1,'juan','123456','S');

-- TIPO_INCIDENCIAS
INSERT INTO TIPO_INCIDENCIAS (TIPO) VALUES ('Software');
INSERT INTO TIPO_INCIDENCIAS (TIPO) VALUES ('Hardware');

-- INCIDENCIAS
INSERT INTO INCIDENCIAS (NOMBRE, ID_TIPO) VALUES ('Error Sistema',1);
INSERT INTO INCIDENCIAS (NOMBRE, ID_TIPO) VALUES ('Falla Equipo',2);

-- PRIORIDAD
INSERT INTO PRIORIDAD (NOMBRE) VALUES ('Baja');
INSERT INTO PRIORIDAD (NOMBRE) VALUES ('Media');
INSERT INTO PRIORIDAD (NOMBRE) VALUES ('Alta');

-- ESTADO_CASO
INSERT INTO ESTADO_CASO (NOMBRE) VALUES ('Recibido');
INSERT INTO ESTADO_CASO (NOMBRE) VALUES ('En Proceso');
INSERT INTO ESTADO_CASO (NOMBRE) VALUES ('Finalizado');
INSERT INTO ESTADO_CASO (NOMBRE) VALUES ('Cerrado');

-- CASOS
INSERT INTO CASOS (ID_EMPLEADO_SOLICITA, ID_TIPO_INCIDENCIA, ID_INCIDENCIA, TITULO, DESCRIPCION, ID_PRIORIDAD, ID_ESTADO_ACTUAL, ID_TECNICO, FECHA_CREACION)
VALUES (2,1,1,'Prueba Sistema','Caso de prueba',3,1,2,SYSTIMESTAMP);

-- HISTORIAL_CASO
INSERT INTO HISTORIAL_CASO (ID_CASO, FECHA, COMENTARIO, ID_ESTADO, ID_EMPLEADO)
VALUES (1,SYSDATE,'Caso recibido',1,2);

-- =============================================================
-- 4) Triggers
-- =============================================================
CREATE OR REPLACE TRIGGER trg_actualizar_estado_caso
AFTER INSERT ON HISTORIAL_CASO
FOR EACH ROW
BEGIN
    UPDATE CASOS
    SET ID_ESTADO_ACTUAL = :NEW.ID_ESTADO
    WHERE ID_CASO = :NEW.ID_CASO;
END;
/

create or replace TRIGGER trg_calcular_resolucion
AFTER INSERT OR UPDATE ON Historial_Caso
FOR EACH ROW
DECLARE
    v_estado_cerrado NUMBER;
BEGIN
    -- Intentamos obtener el ID del estado 'Cerrado'
    SELECT id_estado 
    INTO v_estado_cerrado
    FROM Estado_Caso
    WHERE nombre = 'Cerrado';

    -- Solo actualizar si el nuevo estado es 'Cerrado'
    IF :NEW.id_estado = v_estado_cerrado THEN
        UPDATE Casos
        SET fecha_cierre = SYSTIMESTAMP,
            tiempo_resolucion = SYSTIMESTAMP - fecha_creacion
        WHERE id_caso = :NEW.id_caso;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        -- Evita que el trigger falle si no existe el estado 'Cerrado'
        NULL;
    WHEN OTHERS THEN
        -- Maneja cualquier otro error y evita ORA-04098
        DBMS_OUTPUT.PUT_LINE('Error en trg_calcular_resolucion: ' || SQLERRM);
END;

commit;


INSERT INTO REPUESTOS (NOMBRE, DESCRIPCION, STOCK, PRECIO_UNITARIO) VALUES ('Disco Duro SSD 500GB', 'Unidad de estado sólido para computadoras portátiles y de escritorio', 45, 49.99);
---
INSERT INTO REPUESTOS (NOMBRE, DESCRIPCION, STOCK, PRECIO_UNITARIO) VALUES ('Módulo RAM DDR4 8GB', 'Memoria RAM de 2666 MHz para equipos de oficina', 120, 29.50);
---
INSERT INTO REPUESTOS (NOMBRE, DESCRIPCION, STOCK, PRECIO_UNITARIO) VALUES ('Cable de Red UTP Cat 6', 'Cable Ethernet de 3 metros, color azul, para conexiones de alta velocidad', 300, 3.75);
---
INSERT INTO REPUESTOS (NOMBRE, DESCRIPCION, STOCK, PRECIO_UNITARIO) VALUES ('Ratón Óptico USB', 'Mouse ergonómico con sensor óptico, conexión USB', 85, 9.99);
---
INSERT INTO REPUESTOS (NOMBRE, DESCRIPCION, STOCK, PRECIO_UNITARIO) VALUES ('Teclado Multimedia', 'Teclado de membrana con teclas multimedia, conexión USB', 70, 15.20);
---
INSERT INTO REPUESTOS (NOMBRE, DESCRIPCION, STOCK, PRECIO_UNITARIO) VALUES ('Tóner Laser Negro HP 80A', 'Cartucho de tóner original para impresoras láser', 35, 75.00);
---
INSERT INTO REPUESTOS (NOMBRE, DESCRIPCION, STOCK, PRECIO_UNITARIO) VALUES ('Fuente de Poder ATX 500W', 'Fuente de alimentación estándar para PC de escritorio', 25, 39.95);
---
INSERT INTO REPUESTOS (NOMBRE, DESCRIPCION, STOCK, PRECIO_UNITARIO) VALUES ('Batería para Laptop Genérica', 'Batería de repuesto de 6 celdas, compatible con modelos Dell/HP', 15, 55.50);
---
INSERT INTO REPUESTOS (NOMBRE, DESCRIPCION, STOCK, PRECIO_UNITARIO) VALUES ('Ventilador de CPU', 'Disipador de calor y ventilador para procesadores Intel/AMD', 50, 12.80);
---
INSERT INTO REPUESTOS (NOMBRE, DESCRIPCION, STOCK, PRECIO_UNITARIO) VALUES ('Adaptador USB-C a HDMI', 'Conector para duplicar o extender pantalla desde puerto USB-C', 60, 19.90);


INSERT INTO EMPLEADO (ID_DEPARTAMENTO, NOMBRE, APELLIDO, CORREO, TELEFONO, ROL, ACTIVO, ID_PUESTO)
VALUES (2, 'Laura', 'Martínez', 'laura.martinez@empresa.com', '55533445', 'Tecnico', 'S', 2);

INSERT INTO EMPLEADO (ID_DEPARTAMENTO, NOMBRE, APELLIDO, CORREO, TELEFONO, ROL, ACTIVO, ID_PUESTO)
VALUES (1, 'Ricardo', 'Sánchez', 'ricardo.sanchez@empresa.com', '55555667', 'Tecnico', 'S', 2);

INSERT INTO EMPLEADO (ID_DEPARTAMENTO, NOMBRE, APELLIDO, CORREO, TELEFONO, ROL, ACTIVO, ID_PUESTO)
VALUES (3, 'Elena', 'Ramírez', 'elena.ramirez@empresa.com', '55577889', 'Tecnico', 'S', 2);

INSERT INTO EMPLEADO (ID_DEPARTAMENTO, NOMBRE, APELLIDO, CORREO, TELEFONO, ROL, ACTIVO, ID_PUESTO)
VALUES (2, 'Fernando', 'Vargas', 'fernando.vargas@empresa.com', '55599001', 'Tecnico', 'S', 2);

INSERT INTO EMPLEADO (ID_DEPARTAMENTO, NOMBRE, APELLIDO, CORREO, TELEFONO, ROL, ACTIVO, ID_PUESTO)
VALUES (1, 'Camila', 'Ortiz', 'camila.ortiz@empresa.com', '55522334', 'Tecnico', 'S', 2);


commit;